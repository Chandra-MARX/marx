-*- text -*-

Marx Installation Notes.

Marx requires an ANSI compatable compiler, e.g., gcc.  The SunOS `cc'
compiler is _NOT_ ANSI compliant-- under SunOS, you must use gcc or acc.

To build marx, configure it by running the configure script, e.g.,

    # ./configure

But before you perform this step, see the PROBLEMS section below to
avoid problems on certain architectures, e.g., Ultrix.  See below for
information about building MARX on multiple architectures.

Note that the configure script will take the CC, CFLAGS, and LDFLAGS
from your environment, if they are defined.  If not, it will first
look for gcc.  So, if you have gcc installed, and you want to use a
compiler other than gcc, e.g., acc, you can instruct the configure
script to use the other compiler e.g.,

   # setenv CC acc
   # setenv CFLAGS -g
   # ./configure

Once it has configured itself, simply type `make'.  It will put the
executable in the `bin' directory and copy the marx.par file to this
directory.  You will need to set the DataDirectory parameter to the
subdirectory `marx/data'.  The environment variable `MARX_DATA_DIR' is a
convenient way to do this.

See marx/doc for information about running the simulator.

===========================================================================
Multiple Architectures
===========================================================================

It is easy to install MARX on multiple architectures using the same
source tree.  

To create MARX on multiple architectures, simply define an environment
variable called `ARCH' and set it to an architecture-dependent value,
For example, here at MIT, I build MARX under SunOS 4, Solaris, Linux,
Ultrix, and NeXT.  To build MARX on, e.g., NeXT, I set ARCH to `next'
and then run configure, i.e.,

   # setenv ARCH next
   # ./configure
   # make
   
This will result in the executables in the bin/next subdirectory.   
Similarly when compiling on with Linux, I use:

   # setenv ARCH linux
   # ./configure
   # make

===========================================================================
MARXRSP
===========================================================================
Note: You do not need marxrsp to run marx.  This program is optional!!

To build marxrsp, you first need to get the CFITSIO library if you do
not already have it.  It is not included in this distribution because
you probably already have it if you have ftools.  In any case, after
locating your cfitsio distribution, or creating CFITSIO, do:

   cd marxrsp
   <edit the Makefile>
   make
   make install
   
====================================================================
PROBLEMS
====================================================================

NeXT Problems
-------------
For some reason, rfl refuses to compile under NeXT.  I think it is
a bug in the linker on this system.  If you run into a problem, edit
marx/Makefile to skip building rfl.

Ultrix Problems
---------------
Ultrix cc has a bug in the optimizer causing it to generate bad
assembly code, which the assembler (as) trips over and coredumps.  On
this system, it is recommended that before configuring, set the CFLAGS
environment variable to -g.  That is, do:

   # setenv CFLAGS -g
   # ./configure

Solaris
-------
There appears to be a bug in the libc function `qsort'.  We have not
actually experienced any problems with the bug but `purify' does report an
``unitialiized memory read'' in the qsort function.  This is __NOT__ a
result of a bug in MARX.  If you do experience a coredump of MARX and
the dump occurs while the qsort function is executing, let me know and
I will supply a custom bug-free version of qsort in the next MARX release.


John E. Davis
davis@space.mit.edu
